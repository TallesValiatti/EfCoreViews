// <auto-generated />
using System;
using EfCoreViews;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EfCoreViews.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EfCoreViews.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92338f02-f3a5-4c82-ac9f-f9dc1a8d7256"),
                            Name = "J. R. R. Tolkien"
                        },
                        new
                        {
                            Id = new Guid("d7890984-fc4e-4afa-8fc4-530f4c684a26"),
                            Name = "James Carroll"
                        });
                });

            modelBuilder.Entity("EfCoreViews.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ae6873c-31bc-48de-85f9-c63289a312b3"),
                            AuthorId = new Guid("92338f02-f3a5-4c82-ac9f-f9dc1a8d7256"),
                            Name = "The lord of the rings"
                        },
                        new
                        {
                            Id = new Guid("72c6ec9b-3964-4272-bed5-4d460020b79b"),
                            AuthorId = new Guid("92338f02-f3a5-4c82-ac9f-f9dc1a8d7256"),
                            Name = "The hobbit"
                        });
                });

            modelBuilder.Entity("EfCoreViews.Models.Book", b =>
                {
                    b.HasOne("EfCoreViews.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("EfCoreViews.Models.Author", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
